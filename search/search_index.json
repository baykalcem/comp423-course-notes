{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cem Baykal's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Cem Baykal</li> <li>Reviewer: Hugh Toomey</li> </ul> <p>Hello! In this tutorial you will learn how to create a \"Hello World\" project in Rust. You will learn how to setup a Git repository, create a Rust development container, and how to make a simple Hello World program in Rust. Much of this tutorial is inspired by Starting a Static Website Project with MkDocs by Kris Jordan.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Ensure you have satisfied the following before continuing: 1. A GitHub account which is available at GitHub. 2. Git which can be found at  Installing Git  3. Visual Studio Code: Install VS Code 4. Docker Desktop: Install Docker 5. Fundamentals of using the command-line.</p>"},{"location":"tutorials/rust-setup/#repository-setup","title":"Repository Setup","text":"<ol> <li>Local Repository Setup:<ol> <li>Open either terminal or command-prompt on Mac and Windows respectively. </li> <li>Use the command line to create a new directory and go to it by using the following commands:  <pre><code>mkdir comp423-rust-tutorial\ncd comp423-rust-tutorial\n</code></pre></li> <li>Use Git to initialize a new Git repository: <pre><code>git init\n</code></pre></li> <li>Let's create a README file to explain our new repository: <pre><code>echo \"# COMP423 Rust Tutorial\" &gt; README.md\ngit add README.md\ngit commit -m \"Initial commit with README\"\n</code></pre></li> </ol> </li> <li>Remote Repository Setup:<ol> <li>Sign into your GitHub account</li> <li>Go to new repository and fill in the following: <ul> <li>Repository Name: comp423-rust-tutorial</li> <li>Description: \"Hello World in Rust\"</li> <li>Visibility: Public </li> <li>Do not initialize a README, .gitignore, or license.</li> </ul> </li> <li>Hit \"Create Repository\"</li> </ol> </li> <li>Link Local And Remote Repositories:<ol> <li>Back in the command line add your GitHub repository as a remote where <code>&lt;yourusername&gt;</code> is your GitHub username using:  <code>git remote add origin https://github.com/&lt;your-username&gt;/comp423-rust-tutorial.git</code></li> <li>Using <code>git branch</code> check your default branch name. If it is not <code>main</code> use <code>git branch -M main</code>.</li> <li>Push your local changes to the remote:  <pre><code>git push --set-upstream origin main\n</code></pre></li> <li>If you refresh your repository in your browser you should see your changes. You can use <code>git log</code> to see the commit ID's and messages of your commits.</li> </ol> </li> </ol>"},{"location":"tutorials/rust-setup/#development-container-setup","title":"Development Container Setup","text":"<ol> <li> <p>Let's create a Development Container Configuration </p> <ol> <li>Back in Visual Studio Code, open the newly created <code>comp423-rust-tutorial</code> directory using File &gt; Open Folder. </li> <li>Navigate to Extensions and install the \"Dev Containers\" extension. </li> <li>Create a <code>.devcontainer</code> directory and add a file named <code>devcontainer.json</code> within. </li> <li>Add the following to this file:  <pre><code>{\n\"name\": \"COMP423 Rust Tutorial\",\n\"image\": \"rust:latest\",\n\"customizations\": {\n    \"vscode\": {\n        \"settings\": {},\n        \"extensions\": [\n            \"rust-lang.rust-analyzer\"\n        ]\n    }\n},\n\"postCreateCommand\": \"\",\n}\n</code></pre></li> </ol> <p>Extra Info</p> <ul> <li>name: The label that appears in your VS Code Dev Container environment.</li> <li>image: Points directly to an existing Docker image\u2014in this case, the official Rust image on Docker Hub.</li> <li>settings: Custom VS Code settings inside the container. For our purposes, we can leave this blank.</li> <li>extensions: Lists extensions that will be installed automatically in the container. In this, case we are installing the official rust-analyzer extension.</li> <li>postCreateCommand: Runs after the container is created. We do not need to do anything after creation.</li> </ul> </li> <li> <p>Opening Dev Container</p> <ol> <li>Press <code>Ctrl+Shift+P on Windows or Cmd+Shift+P on Mac</code> then type and select \"Dev Containers: Reopen in Container\". Then press enter to reopen your project in a development container.</li> </ol> </li> </ol>"},{"location":"tutorials/rust-setup/#rust","title":"Rust!","text":"<ol> <li>Once your development container is open, use the built-in terminal and run <code>rustc --version</code>. You should see <code>rustc 1.84.0</code>.</li> <li>In the VS Code terminal, write <code>cargo new hello_423 --vcs none</code>.</li> <li>This will create a new directory. Navigate to this folder in your terminal using <code>cd hello_423</code>.</li> <li>Go to the <code>hello_423/src/main.rs</code> file. Replace this file with: <pre><code>fn main() {\nprintln!(\"Hello 426\");\n}\n</code></pre></li> <li>In your terminal, write <code>cargo build</code>. This command is equivalent to using <code>gcc</code> to compile a program into an executable file. This command compiles the code then places it into the <code>target/debug</code> directory. Then, enter <code>./target/debug/hello_423</code>. This runs the file and is equivalent to writing <code>./</code> for a file compiled with <code>gcc</code>.</li> <li>In your terminal, write <code>cargo run</code>. You will see the output immediately. This is because this command compiles and automatically executes the compiled program unlike <code>build</code>.</li> </ol> <p>Build vs Run</p> <p>When you use <code>cargo build</code>, Cargo compiles your Rust code and produces an executable or library, but it does not run the resulting binary. This means Cargo simply downloads any missing dependencies, compiles the project, and places the build artifacts in a designated target directory. On the other hand, <code>cargo run</code> not only builds your code\u2014downloading and compiling dependencies as needed\u2014but also executes the resulting binary immediately afterward. It\u2019s a convenient way to streamline development, letting you compile and run your program in a single step rather than manually running the built binary each time.</p> <p>Finally, CELEBRATE!!! You have successfully made a Hello World program from scratch in Rust! </p>"}]}